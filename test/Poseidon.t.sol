pragma solidity ^0.8.0;

import {PoseidonDeployer} from "../contracts/PoseidonDeployer.sol";
import { Test } from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";
interface IPoseidon {
    function poseidon(uint256[2] calldata inputs) external pure returns (uint256);
}

// Sanity checking test suite. The code for Poseidon is generated by circomlibjs.
contract PoseidonTest is Test {
    IPoseidon poseidon;

    function setUp() public {
        PoseidonDeployer poseidonDeployer = new PoseidonDeployer();
        poseidon = IPoseidon(poseidonDeployer.deploy());
    }

    function test_zeroHash() public {
        uint256[2] memory inputs;
        inputs[0] = 0;  
        inputs[1] = 0;
        assertEq(poseidon.poseidon(inputs), 14744269619966411208579211824598458697587494354926760081771325075741142829156);
    }

    function test_emptyTreeHashes() public {
        uint256 value = 0;
        uint256[2] memory inputs;
        inputs[0] = value;  
        inputs[1] = value;

        for (uint256 i = 0; i < 20; i++) {
            uint256 result = poseidon.poseidon(inputs);
            inputs[0] = result;
            inputs[1] = result;
            assertEq(result, expectedHashByLevel(i));
        }
    }

    // Efficiency++
    function expectedHashByLevel(uint256 level) private pure returns (uint256) {
        if(level == 0) {
            return 14744269619966411208579211824598458697587494354926760081771325075741142829156;
        } else if (level == 1) {
            return 7423237065226347324353380772367382631490014989348495481811164164159255474657;
        } else if (level == 2) {
            return 11286972368698509976183087595462810875513684078608517520839298933882497716792;
        } else if (level == 3) {
            return 3607627140608796879659380071776844901612302623152076817094415224584923813162;
        } else if (level == 4) {
            return 19712377064642672829441595136074946683621277828620209496774504837737984048981;
        } else if (level == 5) {
            return 20775607673010627194014556968476266066927294572720319469184847051418138353016;
        } else if (level == 6) {
            return 3396914609616007258851405644437304192397291162432396347162513310381425243293;
        } else if (level == 7) {
            return 21551820661461729022865262380882070649935529853313286572328683688269863701601;
        } else if (level == 8) {
            return 6573136701248752079028194407151022595060682063033565181951145966236778420039;
        } else if (level == 9) {
            return 12413880268183407374852357075976609371175688755676981206018884971008854919922;
        } else if (level == 10) {
            return 14271763308400718165336499097156975241954733520325982997864342600795471836726;
        } else if (level == 11) {
            return 20066985985293572387227381049700832219069292839614107140851619262827735677018;
        } else if (level == 12) {
            return 9394776414966240069580838672673694685292165040808226440647796406499139370960;
        } else if (level == 13) {
            return 11331146992410411304059858900317123658895005918277453009197229807340014528524;
        } else if (level == 14) {
            return 15819538789928229930262697811477882737253464456578333862691129291651619515538;
        } else if (level == 15) {
            return 19217088683336594659449020493828377907203207941212636669271704950158751593251;
        } else if (level == 16) {
            return 21035245323335827719745544373081896983162834604456827698288649288827293579666;
        } else if (level == 17) {
            return 6939770416153240137322503476966641397417391950902474480970945462551409848591;
        } else if (level == 18) {
            return 10941962436777715901943463195175331263348098796018438960955633645115732864202;
        } else if (level == 19) {
            return 15019797232609675441998260052101280400536945603062888308240081994073687793470;
        }
    }


}
